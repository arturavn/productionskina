import fs from 'fs';
import path from 'path';
import { Client } from 'pg';

console.log('üîç DIAGN√ìSTICO ESPEC√çFICO - PROBLEMA DE SENHA POSTGRESQL');
console.log('=' .repeat(60));

// Verificar vari√°veis de ambiente carregadas pelo PM2
console.log('\nüìã STEP 1: Verificando vari√°veis de ambiente no processo PM2');
console.log('-'.repeat(50));

const envVars = {
    DB_HOST: process.env.DB_HOST,
    DB_PORT: process.env.DB_PORT,
    DB_NAME: process.env.DB_NAME,
    DB_USER: process.env.DB_USER,
    DB_PASSWORD: process.env.DB_PASSWORD
};

console.log('Vari√°veis carregadas pelo PM2:');
for (const [key, value] of Object.entries(envVars)) {
    if (key === 'DB_PASSWORD') {
        console.log(`  ${key}: ${value ? '[DEFINIDA]' : '[N√ÉO DEFINIDA]'}`);
        if (value) {
            console.log(`    - Tipo: ${typeof value}`);
            console.log(`    - Comprimento: ${value.length}`);
            console.log(`    - Primeiro char: '${value.charAt(0)}'`);
            console.log(`    - √öltimo char: '${value.charAt(value.length - 1)}'`);
            console.log(`    - Cont√©m aspas duplas: ${value.includes('"')}`);
            console.log(`    - Valor raw: ${JSON.stringify(value)}`);
        }
    } else {
        console.log(`  ${key}: ${value || '[N√ÉO DEFINIDA]'}`);
    }
}

// Verificar arquivo .env da raiz
console.log('\nüìã STEP 2: Verificando arquivo .env da raiz');
console.log('-'.repeat(50));

const rootEnvPath = path.resolve(process.cwd(), '.env');
if (fs.existsSync(rootEnvPath)) {
    const rootEnvContent = fs.readFileSync(rootEnvPath, 'utf8');
    const passwordLine = rootEnvContent.split('\n').find(line => line.startsWith('DB_PASSWORD'));
    console.log(`Linha DB_PASSWORD no .env da raiz: ${passwordLine || 'N√ÉO ENCONTRADA'}`);
    
    if (passwordLine) {
        const [, value] = passwordLine.split('=');
        console.log(`Valor extra√≠do: ${JSON.stringify(value)}`);
    }
} else {
    console.log('‚ùå Arquivo .env da raiz n√£o encontrado');
}

// Verificar arquivo .env do server
console.log('\nüìã STEP 3: Verificando arquivo .env do server');
console.log('-'.repeat(50));

const serverEnvPath = path.resolve(process.cwd(), 'server', '.env');
if (fs.existsSync(serverEnvPath)) {
    const serverEnvContent = fs.readFileSync(serverEnvPath, 'utf8');
    const passwordLine = serverEnvContent.split('\n').find(line => line.startsWith('DB_PASSWORD'));
    console.log(`Linha DB_PASSWORD no server/.env: ${passwordLine || 'N√ÉO ENCONTRADA'}`);
    
    if (passwordLine) {
        const [, value] = passwordLine.split('=');
        console.log(`Valor extra√≠do: ${JSON.stringify(value)}`);
    }
} else {
    console.log('‚ùå Arquivo server/.env n√£o encontrado');
}

// Testar diferentes formatos de senha
console.log('\nüìã STEP 4: Testando diferentes formatos de senha');
console.log('-'.repeat(50));

const testPasswords = [
    process.env.DB_PASSWORD, // Como est√°
    process.env.DB_PASSWORD?.replace(/"/g, ''), // Sem aspas duplas
    'skinalogindb', // Valor direto
    '"skinalogindb"' // Com aspas duplas
];

for (let i = 0; i < testPasswords.length; i++) {
    const testPassword = testPasswords[i];
    if (!testPassword) continue;
    
    console.log(`\nüß™ Teste ${i + 1}: ${JSON.stringify(testPassword)}`);
    
    const client = new Client({
        user: process.env.DB_USER,
        host: process.env.DB_HOST,
        database: process.env.DB_NAME,
        password: testPassword,
        port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,
    });
    
    try {
        await client.connect();
        console.log('‚úÖ CONEX√ÉO BEM-SUCEDIDA!');
        await client.end();
        
        console.log('\nüéØ SOLU√á√ÉO ENCONTRADA!');
        console.log(`A senha correta √©: ${JSON.stringify(testPassword)}`);
        console.log(`Tipo: ${typeof testPassword}`);
        break;
    } catch (error) {
        console.log(`‚ùå Falhou: ${error.message}`);
        await client.end().catch(() => {});
    }
}

console.log('\nüìã DIAGN√ìSTICO CONCLU√çDO');
console.log('=' .repeat(60));