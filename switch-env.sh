#!/bin/bash

# Script para alternar entre configura√ß√µes de ambiente
# Uso: ./switch-env.sh [local|production]

SERVER_DIR="./server"
ENV_FILE="$SERVER_DIR/.env"
ENV_LOCAL="$SERVER_DIR/.env.local"
ENV_BACKUP="$SERVER_DIR/.env.backup"

# Arquivos do Frontend
FRONTEND_ENV="./.env"
FRONTEND_ENV_LOCAL="./.env.local"
FRONTEND_ENV_BACKUP="./.env.backup"
VITE_CONFIG="./vite.config.ts"
VITE_CONFIG_BACKUP="./vite.config.backup.ts"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para mostrar uso
show_usage() {
    echo -e "${BLUE}Uso: $0 [local|production|status]${NC}"
    echo -e "${YELLOW}Comandos:${NC}"
    echo -e "  local      - Alterna para configura√ß√£o de desenvolvimento"
    echo -e "  production - Alterna para configura√ß√£o de produ√ß√£o"
    echo -e "  status     - Mostra qual configura√ß√£o est√° ativa"
    echo -e "  backup     - Cria backup da configura√ß√£o atual"
    echo -e "  restore    - Restaura backup da configura√ß√£o"
}

# Fun√ß√£o para verificar status atual
check_status() {
    if [ ! -f "$ENV_FILE" ]; then
        echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
        return 1
    fi
    
    # Verifica se √© desenvolvimento ou produ√ß√£o baseado no NODE_ENV
    NODE_ENV=$(grep "^NODE_ENV=" "$ENV_FILE" | cut -d'=' -f2)
    FRONTEND_URL=$(grep "^FRONTEND_URL=" "$ENV_FILE" | cut -d'=' -f2)
    
    echo -e "${BLUE}üìä Status atual da configura√ß√£o:${NC}"
    echo -e "NODE_ENV: ${YELLOW}$NODE_ENV${NC}"
    echo -e "FRONTEND_URL: ${YELLOW}$FRONTEND_URL${NC}"
    
    if [ "$NODE_ENV" = "development" ]; then
        echo -e "${GREEN}‚úÖ Configura√ß√£o DESENVOLVIMENTO ativa${NC}"
    elif [ "$NODE_ENV" = "production" ]; then
        echo -e "${GREEN}‚úÖ Configura√ß√£o PRODU√á√ÉO ativa${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Configura√ß√£o n√£o identificada${NC}"
    fi
}

# Fun√ß√£o para criar backup
create_backup() {
    local backup_created=false
    
    # Backup do servidor
    if [ -f "$ENV_FILE" ]; then
        cp "$ENV_FILE" "$ENV_BACKUP"
        echo -e "${GREEN}‚úÖ Backup criado: server/.env.backup${NC}"
        backup_created=true
    fi
    
    # Backup do frontend
    if [ -f "$FRONTEND_ENV" ]; then
        cp "$FRONTEND_ENV" "$FRONTEND_ENV_BACKUP"
        echo -e "${GREEN}‚úÖ Backup criado: .env.backup${NC}"
        backup_created=true
    fi
    
    # Backup do vite.config.ts
    if [ -f "$VITE_CONFIG" ]; then
        cp "$VITE_CONFIG" "$VITE_CONFIG_BACKUP"
        echo -e "${GREEN}‚úÖ Backup criado: vite.config.backup.ts${NC}"
        backup_created=true
    fi
    
    if [ "$backup_created" = false ]; then
        echo -e "${RED}‚ùå Nenhum arquivo encontrado para backup!${NC}"
        return 1
    fi
}

# Fun√ß√£o para restaurar backup
restore_backup() {
    local restored=false
    
    # Restaurar servidor
    if [ -f "$ENV_BACKUP" ]; then
        cp "$ENV_BACKUP" "$ENV_FILE"
        echo -e "${GREEN}‚úÖ Servidor restaurado do backup${NC}"
        restored=true
    fi
    
    # Restaurar frontend
    if [ -f "$FRONTEND_ENV_BACKUP" ]; then
        cp "$FRONTEND_ENV_BACKUP" "$FRONTEND_ENV"
        echo -e "${GREEN}‚úÖ Frontend restaurado do backup${NC}"
        restored=true
    fi
    
    # Restaurar vite.config.ts
    if [ -f "$VITE_CONFIG_BACKUP" ]; then
        cp "$VITE_CONFIG_BACKUP" "$VITE_CONFIG"
        echo -e "${GREEN}‚úÖ Vite config restaurado do backup${NC}"
        restored=true
    fi
    
    if [ "$restored" = true ]; then
        check_status
    else
        echo -e "${RED}‚ùå Nenhum arquivo de backup encontrado!${NC}"
        return 1
    fi
}

# Fun√ß√£o para alternar para desenvolvimento
switch_to_local() {
    local missing_files=false
    
    # Verifica arquivos necess√°rios
    if [ ! -f "$ENV_LOCAL" ]; then
        echo -e "${RED}‚ùå Arquivo server/.env.local n√£o encontrado!${NC}"
        missing_files=true
    fi
    
    if [ ! -f "$FRONTEND_ENV_LOCAL" ]; then
        echo -e "${RED}‚ùå Arquivo .env.local n√£o encontrado!${NC}"
        missing_files=true
    fi
    
    if [ "$missing_files" = true ]; then
        echo -e "${YELLOW}üí° Alguns arquivos de configura√ß√£o local est√£o faltando${NC}"
        return 1
    fi
    
    # Cria backup autom√°tico
    create_backup
    
    # Copia configura√ß√µes locais
    cp "$ENV_LOCAL" "$ENV_FILE"
    cp "$FRONTEND_ENV_LOCAL" "$FRONTEND_ENV"
    
    # Para desenvolvimento, o vite.config.ts padr√£o j√° est√° configurado corretamente
    
    echo -e "${GREEN}‚úÖ Alternado para configura√ß√£o de DESENVOLVIMENTO${NC}"
    echo -e "${BLUE}üîß Configura√ß√µes ativas:${NC}"
    echo -e "  - NODE_ENV: development"
    echo -e "  - FRONTEND_URL: http://localhost:5173"
    echo -e "  - BASE_URL: http://localhost:3001"
    echo -e "  - VITE_API_URL: http://localhost:3001/api"
    echo -e "  - Mercado Pago: SANDBOX"
    echo -e "  - Database: skina_ecopecas_dev"
}

# Fun√ß√£o para alternar para produ√ß√£o
switch_to_production() {
    local missing_backups=false
    
    # Verifica se os backups existem
    if [ ! -f "$ENV_BACKUP" ]; then
        echo -e "${RED}‚ùå Backup server/.env n√£o encontrado!${NC}"
        missing_backups=true
    fi
    
    if [ ! -f "$FRONTEND_ENV_BACKUP" ]; then
        echo -e "${RED}‚ùå Backup .env n√£o encontrado!${NC}"
        missing_backups=true
    fi
    
    if [ ! -f "$VITE_CONFIG_BACKUP" ]; then
        echo -e "${RED}‚ùå Backup vite.config.ts n√£o encontrado!${NC}"
        missing_backups=true
    fi
    
    if [ "$missing_backups" = true ]; then
        echo -e "${YELLOW}üí° Execute 'backup' primeiro para criar os backups de produ√ß√£o${NC}"
        return 1
    fi
    
    # Restaura configura√ß√µes de produ√ß√£o
    cp "$ENV_BACKUP" "$ENV_FILE"
    cp "$FRONTEND_ENV_BACKUP" "$FRONTEND_ENV"
    cp "$VITE_CONFIG_BACKUP" "$VITE_CONFIG"
    
    echo -e "${GREEN}‚úÖ Alternado para configura√ß√£o de PRODU√á√ÉO${NC}"
    echo -e "${BLUE}üöÄ Configura√ß√µes ativas:${NC}"
    echo -e "  - NODE_ENV: production"
    echo -e "  - FRONTEND_URL: https://skinaecopecas.com.br"
    echo -e "  - BASE_URL: https://skinaecopecas.com.br"
    echo -e "  - VITE_API_URL: https://skinaecopecas.com.br/api"
    echo -e "  - Mercado Pago: PRODUCTION"
    echo -e "  - Database: skina_ecopecas"
}

# Verifica se est√° no diret√≥rio correto
if [ ! -d "$SERVER_DIR" ]; then
    echo -e "${RED}‚ùå Diret√≥rio server/ n√£o encontrado!${NC}"
    echo -e "${YELLOW}üí° Execute este script na raiz do projeto${NC}"
    exit 1
fi

# Processa argumentos
case "$1" in
    "local")
        switch_to_local
        ;;
    "production")
        switch_to_production
        ;;
    "status")
        check_status
        ;;
    "backup")
        create_backup
        ;;
    "restore")
        restore_backup
        ;;
    "")
        show_usage
        echo ""
        check_status
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
        show_usage
        exit 1
        ;;
esac